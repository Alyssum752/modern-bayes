Teaching Bayes: A Binomial-Beta Lab with Solutions
# Chunk 1
set.seed(123)
obs.data <- rbinom(n = 100, size = 1, prob = 0.01)
# Chunk 2
### Bernoulli LH Function ###
# Input: the observed data, theta grid #
# Output: Produces likelihood values #
myBernLH <- function(obs.data, theta){
N <- length(obs.data)
x <- sum(obs.data)
LH <- ((theta)^x)*((1 - theta)^(N-x))
return(LH)
}
# Chunk 3
### Plot LH for a grid of theta values ###
# Create the grid #
theta.sim <- seq(from = 0, to = 1, length.out = 1000)
# Store the LH Values #
sim.LH <- myBernLH(obs.data = obs.data, theta = theta.sim)
# Create the Plot #
# Chunk 4
plot(theta.sim, sim.LH, type = 'l',
main = 'Likelihood Profile', xlab = 'Simulated Support',
ylab = 'Likelihood')
# Chunk 5
### Function to determine posterior parameters based on ###
### observed data and prior assumptions ###
# Inputs - Prior Paramters, observed data #
myPosteriorParam <- function(pri.a, pri.b, obs.data){
N <- length(obs.data)
x <- sum(obs.data)
post.a <- pri.a + x
post.b <- pri.b + N - x
post.param <- list('post.a' = post.a,
'post.b' = post.b)
return(post.param)
}
# Chunk 6
# Find posterior parameters for two different priors #
# a = 1, b = 1 #
non.inform <- myPosteriorParam(pri.a = 1, pri.b = 1, obs.data = obs.data)
inform <- myPosteriorParam(pri.a = 3, pri.b = 1, obs.data = obs.data)
# a = 3, b = 1 #
# Chunk 7
# print the output values
print(c(non.inform,inform))
# Chunk 8
### Create a plot of LH, Pri, Posterior using the simulated seq ###
non.inform.den <- dbeta(x = theta.sim, shape1 = non.inform$post.a,
shape2 = non.inform$post.b)
inform.den <- dbeta(x = theta.sim, shape1 = inform$post.a,
shape2 = inform$post.b)
pri.inform <- dbeta(x = theta.sim, shape1 = 3,
shape2 = 1)
pri.non.inform <- dbeta(x = theta.sim, shape1 = 1,
shape2 = 1)
# Chunk 9
require(xtable)
## Create confidence/ credible intervals - informative ##
# Credible Interval #
my.sim <- rbeta(n = 1000, shape1 = inform$post.a,
shape2 = inform$post.b)
my.credI <- quantile(my.sim, prob = c(0.025, 0.975))
# Chunk 10
# Confidence Interval #
p.hat <- sum(obs.data) / length(obs.data)
my.confI <- p.hat + qnorm(p = c(0.025, 0.975)) *
sqrt(p.hat*(1-p.hat)/length(obs.data))
# Store the results #
results <- rbind(my.credI, my.confI)
rownames(results) <- c('Credible Interval', 'Confidence Interval')
# present these results in a nice table #
# Chunk 11
print(xtable(results, digits = 4), comment = FALSE)
# Chunk 1
set.seed(123)
obs.data <- rbinom(n = 100, size = 1, prob = 0.01)
# Chunk 2
### Bernoulli LH Function ###
# Input: the observed data, theta grid #
# Output: Produces likelihood values #
myBernLH <- function(obs.data, theta){
N <- length(obs.data)
x <- sum(obs.data)
LH <- ((theta)^x)*((1 - theta)^(N-x))
return(LH)
}
# Chunk 3
### Plot LH for a grid of theta values ###
# Create the grid #
theta.sim <- seq(from = 0, to = 1, length.out = 1000)
# Store the LH Values #
sim.LH <- myBernLH(obs.data = obs.data, theta = theta.sim)
# Create the Plot #
# Chunk 4
plot(theta.sim, sim.LH, type = 'l',
main = 'Likelihood Profile', xlab = 'Simulated Support',
ylab = 'Likelihood')
# Chunk 5
### Function to determine posterior parameters based on ###
### observed data and prior assumptions ###
# Inputs - Prior Paramters, observed data #
myPosteriorParam <- function(pri.a, pri.b, obs.data){
N <- length(obs.data)
x <- sum(obs.data)
post.a <- pri.a + x
post.b <- pri.b + N - x
post.param <- list('post.a' = post.a,
'post.b' = post.b)
return(post.param)
}
# Chunk 6
# Find posterior parameters for two different priors #
# a = 1, b = 1 #
non.inform <- myPosteriorParam(pri.a = 1, pri.b = 1, obs.data = obs.data)
inform <- myPosteriorParam(pri.a = 3, pri.b = 1, obs.data = obs.data)
# a = 3, b = 1 #
# Chunk 7
# print the output values
print(c(non.inform,inform))
# Chunk 8
### Create a plot of LH, Pri, Posterior using the simulated seq ###
non.inform.den <- dbeta(x = theta.sim, shape1 = non.inform$post.a,
shape2 = non.inform$post.b)
inform.den <- dbeta(x = theta.sim, shape1 = inform$post.a,
shape2 = inform$post.b)
pri.inform <- dbeta(x = theta.sim, shape1 = 3,
shape2 = 1)
pri.non.inform <- dbeta(x = theta.sim, shape1 = 1,
shape2 = 1)
# Chunk 9
require(xtable)
## Create confidence/ credible intervals - informative ##
# Credible Interval #
my.sim <- rbeta(n = 1000, shape1 = inform$post.a,
shape2 = inform$post.b)
my.credI <- quantile(my.sim, prob = c(0.025, 0.975))
# Chunk 10
# Confidence Interval #
p.hat <- sum(obs.data) / length(obs.data)
my.confI <- p.hat + qnorm(p = c(0.025, 0.975)) *
sqrt(p.hat*(1-p.hat)/length(obs.data))
# Store the results #
results <- rbind(my.credI, my.confI)
rownames(results) <- c('Credible Interval', 'Confidence Interval')
# present these results in a nice table #
# Chunk 11
print(xtable(results, digits = 4), comment = FALSE)
